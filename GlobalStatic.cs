using System.Text;


public static class GlobalStatic
{
    public static string applicationName = "canuseeme";

    public static string webSite = "https://github.com/tezoatlipoca/canuseeme";

    public static string? staticAboutPage = null;

    // generates everything from the footer to the closing html tag
    // including the closing body tag
    public static void GeneratePageFooter(StringBuilder sb)
    {
        sb.AppendLine("<footer>");
        sb.AppendLine($"<div class=\"byline\">Generated by {GlobalStatic.applicationName} instance {GlobalConfig.Hostname} at {DateTime.Now}</div>");
        sb.AppendLine($"<div class=\"byline\">Build # {GlobalConfig.bldVersion}. For more information, visit <a href=\"{GlobalStatic.webSite}\">{GlobalStatic.webSite}</a></div>");
        sb.AppendLine("</footer>");
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
    }

    // generates everything up to and including the opening body tag
    public static void GenerateHTMLHead(StringBuilder sb, string title = "")
    {
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html>");
        sb.AppendLine("<head>");
        sb.AppendLine("<meta charset=\"utf-8\">");
        if (GlobalConfig.sitecss != null)
        {
            //sb.AppendLine($"<link rel=\"stylesheet\" type=\"text/css\" href=\"/{GlobalConfig.sitecss}\">");
            sb.AppendLine("<style>");
            sb.AppendLine(GlobalConfig.sitecss);
            sb.AppendLine("</style>");
        }
        if (GlobalConfig.sitepng != null)
        {
            sb.AppendLine($"<link rel=\"icon\" href=\"{GlobalConfig.sitepng}\" type=\"image/png\">");
        }
        sb.AppendLine($"<title>{GlobalConfig.Hostname} - {title}</title>");
        sb.AppendLine("</head>");
        sb.AppendLine("<body >");
        sb.AppendLine($"<h1>{title}</h1>");
        //sb.AppendLine("<p><a href=\"/\">Home</a></p>");
        sb.AppendLine("<span class=\"results\" style=\"color: red;\"></span>");
    }

    // public static void GenerateUnAuthPage(StringBuilder sb, string msg)
    // {
    //     DBg.d(LogLevel.Trace, "GenerateUnAuthPage");
    //     // get all the lists

    //     GenerateHTMLHead(sb, "Unauthorized");


    //     sb.AppendLine($"<p style=\"color: red;\">{msg}</p>");
    //     sb.AppendLine("<p>Go back to <a href=\"/login\">the login page?</a></p>");
    //     GeneratePageFooter(sb);
    // }


    public static void GenerateAboutPage()
    {
        DBg.d(LogLevel.Trace, "GenerateAboutPage");
        // get all the lists
        StringBuilder sb = new StringBuilder();
        GlobalStatic.GenerateHTMLHead(sb, "About CanUSeeMe");
        sb.AppendLine("<p><code>canuseeme</code> is a simple, single binary self-hosted webservice that allows any OTHER web service to see how it presents on the internet.</p>");
        sb.AppendLine("<p>A little bit like a remote repeater: I've been configured as `my.domain.com`, but am I actually reachable at that?</p>");
        sb.AppendLine($"<pre>{GlobalConfig.Hostname}/blob/{{key}}</pre>");
        sb.AppendLine($"<pre><code>curl -X PUT \"{GlobalConfig.Hostname}/blob/abc123\" --data-binary @excellent.meme.png</code></pre>");
        sb.AppendLine("<p>uploads a file to key <code>abc123</code> (obviously you'd want something better than that). And to retrieve:</p>");
        sb.AppendLine($"<pre><code>curl \"{GlobalConfig.Hostname}/blob/abc123\" --output &lt;FILE&gt;</code></pre>");
        sb.AppendLine("<p>It's up to you to know <em>what</em> data is stored at that key - no metadata about the payload is provided when you upload, so no metadata about it is available when you retrieve it.</p>");

        sb.AppendLine($"<p>This <code>canuseeme</code> instance is provided by {GlobalConfig.siteInformation}</p>");
        GlobalStatic.GeneratePageFooter(sb);
        staticAboutPage = sb.ToString();
    }




    public static StringBuilder Generate404Page(string requestPath)
    {
        DBg.d(LogLevel.Trace, "Generate404Page");
        // get all the lists
        StringBuilder sb = new StringBuilder();
        GenerateHTMLHead(sb, "Page Not Found");
        sb.AppendLine($"<p>Requested path: {requestPath}</p>");
        sb.AppendLine($"<p>Check the <a href=\"/about\">about</a> page?</p>");
        GeneratePageFooter(sb);
        return sb;
    }

    public static StringBuilder HTMLOutput(RemoteSiteDto rsd)
    {
        DBg.d(LogLevel.Trace, "HTMLOutput");
        StringBuilder sb = new StringBuilder();
        GenerateHTMLHead(sb, $"Remote Info: {rsd.url}");
        sb.AppendLine($"<h2>YOU ARE:{rsd.callerID}</h2>");
        sb.AppendLine("<div class=\"remote-site-info\">");
        sb.AppendLine($"<p>Port: {rsd.port} ({rsd.portType})</p>");
        sb.AppendLine($"<p>Path: {rsd.path}</p>");
        sb.AppendLine($"<p>URL: <a href=\"{rsd.url}\">{rsd.url}</a></p>");

        if (rsd.ipAddresses != null && rsd.ipAddresses.Length > 0)
        {
            sb.AppendLine("<h3>IP Addresses:</h3>");
            sb.AppendLine("<ul>");
            foreach (var ip in rsd.ipAddresses)
            {
                sb.AppendLine($"<li>{ip}</li>");
            }
            sb.AppendLine("</ul>");
        }
        if (!string.IsNullOrEmpty(rsd.pingResponse))
        {
            sb.AppendLine("<h3>Ping Response:</h3>");
            sb.AppendLine($"<pre>{rsd.pingResponse}</pre>");
        }

        if (!string.IsNullOrEmpty(rsd.portResponse))
        {
            sb.AppendLine("<h3>Port Check Response:</h3>");
            sb.AppendLine($"<pre>{rsd.portResponse?.Replace("\\n", Environment.NewLine)}</pre>");
        }

        if (!string.IsNullOrEmpty(rsd.curlResponse))
        {
            var htmlBytes = System.Text.Encoding.UTF8.GetByteCount(rsd.curlResponse);

            // Remove <html>, </html>, <head>...</head>, <body>, </body> tags (case-insensitive)
            string cleanedHtml = rsd.curlResponse;
            cleanedHtml = System.Text.RegularExpressions.Regex.Replace(cleanedHtml, @"<head[\s\S]*?</head>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            cleanedHtml = System.Text.RegularExpressions.Regex.Replace(cleanedHtml, @"</?html.*?>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            cleanedHtml = System.Text.RegularExpressions.Regex.Replace(cleanedHtml, @"</?body.*?>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            sb.AppendLine("<h3>Curl Response:</h3>");
            sb.AppendLine($"<div>Displaying {htmlBytes} bytes of HTML data</div>");
            sb.AppendLine("<table style=\"width:100%;table-layout:fixed\"><tr>");
            sb.AppendLine("<td style=\"vertical-align:top;width:50%\">");
            sb.AppendLine("<b>Raw HTML</b>");
            sb.AppendLine($"<pre style=\"overflow-x:auto;\">{System.Net.WebUtility.HtmlEncode(rsd.curlResponse)}</pre>");
            sb.AppendLine("</td>");
            sb.AppendLine("<td style=\"vertical-align:top;width:50%;border-left:1px solid #ccc;\">");
            sb.AppendLine("<b>Rendered HTML</b> (source formatting styles may not be preserved)");
            sb.AppendLine($"<div style=\"overflow-x:auto;\">{cleanedHtml}</div>");
            sb.AppendLine("</td>");
            sb.AppendLine("</tr></table>");
        }
        if (rsd.ExceptionInfo != null)
        {
            sb.AppendLine("<h3>Exception Information:</h3>");
            sb.AppendLine($"<p>{rsd.ExceptionInfo.Message}</p>");
            if (rsd.ExceptionInfo.InnerException != null)
            {
                sb.AppendLine($"<p>Inner Exception: {rsd.ExceptionInfo.InnerException.Message}</p>");
            }
        }

        sb.AppendLine("</div>"); // Close remote-site-info div
        sb.AppendLine("<hr>");

        GlobalStatic.GeneratePageFooter(sb);
        return sb;
    }


}

